generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comments {
  id               Int             @id @default(autoincrement())
  content          String          @db.VarChar(240)
  user             Users           @relation(fields: [userId], references: [id])
  userId           Int
  communityLevel   CommunityLevels @relation(fields: [communityLevelId], references: [id])
  communityLevelId Int
  createdAt        DateTime        @default(now())
}

model CommunityLevels {
  id        Int                       @id @default(autoincrement())
  name      String                    @db.VarChar(120)
  reward    String?                   @db.VarChar(255)
  user      Users                     @relation(fields: [userId], references: [id])
  userId    Int
  data      Json                      @db.Json
  type      Types                     @default(SQUARE)
  certified Boolean                   @default(false)
  notes     Notes[]
  comments  Comments[]
  finished  FinishedCommunityLevels[]
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
}

model Feedbacks {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(140)
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FinishedCommunityLevels {
  id                Int              @id @default(autoincrement())
  user              Users            @relation(fields: [userId], references: [id])
  userId            Int
  communityLevel    Levels           @relation(fields: [communityLevelId], references: [id])
  communityLevelId  Int
  clearTime         Int?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  CommunityLevels   CommunityLevels? @relation(fields: [communityLevelsId], references: [id])
  communityLevelsId Int?
}

model FinishedLevels {
  id        Int      @id @default(autoincrement())
  user      Users    @relation(fields: [userId], references: [id])
  userId    Int
  level     Levels   @relation(fields: [levelId], references: [id])
  levelId   Int
  clearTime Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Levels {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(120)
  reward                  String                    @db.Text
  world                   Worlds                    @relation(fields: [worldId], references: [id])
  worldId                 Int
  data                    Json                      @db.Json
  type                    Types                     @default(SQUARE)
  finished                FinishedLevels[]
  FinishedCommunityLevels FinishedCommunityLevels[]
}

model Notes {
  id               Int             @id @default(autoincrement())
  value            Boolean
  user             Users           @relation(fields: [userId], references: [id])
  userId           Int
  communityLevel   CommunityLevels @relation(fields: [communityLevelId], references: [id])
  communityLevelId Int
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

enum Roles {
  USER
  ADMIN
}

enum Types {
  SQUARE
}

model Users {
  id                      Int                       @id @default(autoincrement())
  email                   String                    @unique @db.VarChar(255)
  username                String                    @unique @db.VarChar(50)
  password                String                    @db.VarChar(255)
  roles                   Roles[]
  communityLevels         CommunityLevels[]
  notes                   Notes[]
  comments                Comments[]
  finishedLevels          FinishedLevels[]
  finishedCommunityLevels FinishedCommunityLevels[]
}

model Worlds {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(255)
  value  Float
  levels Levels[]
}
